{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","age","setAge","country","setCounty","position","setPosition","wage","setWage","newWage","setNewWage","employeeList","setEmployeeList","className","type","onChange","e","target","value","onClick","console","log","Axios","post","then","get","response","data","map","val","key","placeholder","id","put","alert","delete","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a88a099c.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport Axios from 'axios';\n\nfunction App() {\n\n  const [name, setName] = useState(\"\");\n  const [age, setAge] = useState(0);\n  const [country, setCounty] = useState(\"\");\n  const [position, setPosition] = useState(\"\");\n  const [wage, setWage] = useState(0);\n\n  const [newWage, setNewWage] = useState([]);\n\n  // const displayInfo = () => {\n  //   console.log(name + age + country + position + wage);\n  // };\n\n  const [employeeList, setEmployeeList] = useState([]);\n\n  const addEmployee = () => {\n    console.log(name);\n    Axios.post('http://localhost:3001/employees', {  //body\n      name: name,\n      age: age,\n      country: country,\n      position: position,\n      wage: wage\n    }).then(() => {\n      console.log(\"success\");\n    });\n  };\n\n  const getEmployees = () => {\n    Axios.get('http://localhost:3001/employees').then((response) => {\n      setEmployeeList(response.data)\n      // console.log(response);\n    });\n  };\n\n  const updateEmployeeWage = (id) => {\n    Axios.put(\"http://localhost:3001/employees\", { wage: newWage, id: id })\n      .then((response) => {\n        setEmployeeList(employeeList.map((val) => {\n          return val.id == id ? {\n            id: val,\n            name: val.name,\n            country: val.country,\n            age: val.age,\n            position: val.position,\n            wage: newWage\n          } : val\n        }));\n        alert(\"update!\");\n      })\n  }\n\n  const deleteEmployee = (id) => {\n    Axios.delete(`http://localhost:3001/employees/${id}`)\n    .then((response) => {\n      //getEmployees()\n      setEmployeeList(employeeList.filter((val)=> {\n        return val.id == id\n      }))\n      alert(\"delete!\");\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"information\">\n        <label>Name</label>\n        <input\n          type=\"text\"\n          onChange={(e) => {\n            setName(e.target.value);\n          }} />\n        <label>Age:</label>\n        <input type=\"number\"\n          onChange={(e) => {\n            setAge(e.target.value);\n          }}\n        />\n        <label>Country:</label>\n        <input type=\"text\"\n          onChange={(e) => {\n            setCounty(e.target.value);\n          }}\n        />\n        <label>Position:</label>\n        <input type=\"text\"\n          onChange={(e) => {\n            setPosition(e.target.value);\n          }}\n        />\n        <label>Wage (year):</label>\n        <input type=\"number\"\n          onChange={(e) => {\n            setWage(e.target.value);\n          }} />\n        <button\n          // onClick={displayInfo}\n          onClick={addEmployee}\n        >Add Employee</button>\n      </div>\n      <div className=\"employees\">\n\n        <button onClick={getEmployees}>Show Employees</button>\n        {employeeList.map((val, key) => {\n          return <div className=\"employee\">\n            <div>\n              <h3>Name: {val.name}</h3>\n              <h3>Age: {val.age}</h3>\n              <h3>Country: {val.country}</h3>\n              <h3>Position: {val.position}</h3>\n              <h3>Wage: {val.wage}</h3>\n            </div>\n            <div>\n              {\" \"}\n              <input type=\"text\" placeholder=\"2000...\"\n                onChange={(e) => {\n                  setNewWage(e.target.value);\n                }}\n              />\n              <button onClick={() => {\n                updateEmployeeWage(val.id)\n              }}>Update</button>\n              <button\n                onClick={() => { deleteEmployee(val.id) }}\n              >Delete</button>\n            </div>\n          </div>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}